pipeline {
    agent any
    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'What action should Terraform take?')
    }
    environment {
        IMAGE_NAME = 'dpcode72/java'
        IMAGE_TAG = "${BUILD_NUMBER}"
    }
    stages {
        stage('Terraform') {
            steps {
                script {
                    withCredentials([
                        file(credentialsId: 'publicKeyFile', variable: 'PUBLIC_KEY_FILE'),
                        string(credentialsId: 'awsAccessKeyId', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'awsSecretAccessKey', variable: 'AWS_SECRET_ACCESS_KEY')
                    ]) {
                        dir('Terraform') {
                            sh 'terraform init'
                            sh 'terraform validate'
                            sh "terraform ${params.ACTION} -var \"public_key=\$(cat \$PUBLIC_KEY_FILE)\" -auto-approve"
                            if (params.ACTION == 'apply') {
                                def ip_address = sh(script: 'terraform output -raw aws_instance_public_ip', returnStdout: true).trim()
                                writeFile file: '../Ansible/inventory', text: "monitoring-server ansible_host=${ip_address}"
                            }
                        }
                    }
                }
            }
        }
        stage('Delay') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                script {
                    echo 'Waiting for SSH agent...'
                    sleep 120
                }
            }
        }
        stage('Java-Build') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                dir('Application') {
                    sh 'mvn clean package'
                }
            }
        }
        stage('Docker-Image') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                script {
                    dir('Application') {
                        sh """
                        docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
                        """
                    }
                }
            }
        }
        stage('Docker-Push') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-login') {
                        docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push()
                    }
                }
            }
        }
        stage('Ansible') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'sshCredentials', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
                    dir('Ansible') {
                        //sh "ansible-playbook -i inventory appPlaybook.yaml --private-key=$SSH_KEY -u $SSH_USER"
                          sh "ansible-playbook -i inventory appPlaybook.yaml --extra-vars \"docker_image_name=${IMAGE_NAME} docker_image_tag=${IMAGE_TAG}\" --private-key=$SSH_KEY -u $SSH_USER"
                    }
                }
            }
        }
        stage('Output URLs') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                script {
                    def ip_address = sh(script: 'terraform -chdir=Terraform output -raw aws_instance_public_ip', returnStdout: true).trim()
                    def java_url = "http://${ip_address}:8004"
                    echo "Java URL: ${java_url}"
                    writeFile file: 'urls.txt', text: "Java URL: ${java_url}"
                }
            }
        }
        stage('Archive URLs') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                archiveArtifacts artifacts: 'urls.txt', onlyIfSuccessful: true
            }
        }
    }
}
